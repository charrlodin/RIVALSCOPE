generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id // Clerk user ID - no auto-generation
  email         String    @unique
  name          String?
  signalsBalance Int      @default(50) // Free trial: 50 signals
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  competitors        Competitor[]
  notifications      Notification[]
  signalPurchases    SignalPurchase[]
  signalTransactions SignalTransaction[]
  
  @@map("users")
}

model SignalPurchase {
  id              String   @id @default(cuid())
  userId          String
  pack            SignalPack
  signals         Int      // Number of signals purchased
  amount          Int      // Amount paid in cents
  stripePaymentId String?
  expiresAt       DateTime // Signals expire after 12 months
  createdAt       DateTime @default(now())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("signal_purchases")
}

model SignalTransaction {
  id           String         @id @default(cuid())
  userId       String
  competitorId String?
  type         MonitoringType
  signalsUsed  Int
  description  String?
  createdAt    DateTime       @default(now())
  
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  competitor Competitor? @relation(fields: [competitorId], references: [id], onDelete: SetNull)
  
  @@map("signal_transactions")
}

model Competitor {
  id             String         @id @default(cuid())
  userId         String
  url            String
  name           String?
  description    String?
  isActive       Boolean        @default(true)
  monitoringType MonitoringType @default(SINGLE_PAGE)
  crawlFrequency CrawlFrequency @default(DAILY)
  lastCrawled    DateTime?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  
  user               User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  crawlData          CrawlData[]
  changes            Change[]
  signalTransactions SignalTransaction[]
  
  @@map("competitors")
}

model CrawlData {
  id           String   @id @default(cuid())
  competitorId String
  url          String
  content      String
  contentHash  String
  metadata     Json?
  crawledAt    DateTime @default(now())
  
  competitor Competitor @relation(fields: [competitorId], references: [id], onDelete: Cascade)
  changes    Change[]
  
  @@map("crawl_data")
}

model Change {
  id           String     @id @default(cuid())
  competitorId String
  crawlDataId  String
  changeType   ChangeType
  title        String
  description  String?
  oldValue     String?
  newValue     String?
  severity     Severity   @default(MEDIUM)
  isRead       Boolean    @default(false)
  detectedAt   DateTime   @default(now())
  
  competitor Competitor @relation(fields: [competitorId], references: [id], onDelete: Cascade)
  crawlData  CrawlData  @relation(fields: [crawlDataId], references: [id], onDelete: Cascade)
  notifications Notification[]
  
  @@map("changes")
}

model Notification {
  id         String           @id @default(cuid())
  userId     String
  changeId   String
  type       NotificationType @default(EMAIL)
  title      String
  message    String
  isRead     Boolean          @default(false)
  sentAt     DateTime?
  createdAt  DateTime         @default(now())
  
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  change Change @relation(fields: [changeId], references: [id], onDelete: Cascade)
  
  @@map("notifications")
}

enum SignalPack {
  DEVELOPER  // $10 for 100 signals
  STARTUP    // $45 for 500 signals
  GROWTH     // $80 for 1,000 signals
  SCALE      // $350 for 5,000 signals
}

enum MonitoringType {
  SINGLE_PAGE    // 1 signal - single page check
  SECTION        // 10 signals - section monitoring with crawl
}

enum CrawlFrequency {
  HOURLY
  DAILY
  WEEKLY
}

enum ChangeType {
  PRICE_CHANGE
  CONTENT_UPDATE
  NEW_BLOG_POST
  FEATURE_ANNOUNCEMENT
  PRODUCT_UPDATE
  GENERAL_CHANGE
}

enum Severity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum NotificationType {
  EMAIL
  IN_APP
  PUSH
}